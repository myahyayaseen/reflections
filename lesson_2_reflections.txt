Reflection Exercise 1:

What happens when you initialize a repository? Why do you need to do it?

Answer1:

Initializing a repository will create a .git file within the same directory. 
Files within that directory will be untracked in the beginning. We need to do 
this to make that directory a repository. Otherwise it is essentially just a 
directory on our disks.

Reflection Exercise 2:

How is the staging area different from the working directory and the 
repository? What value do you think it offers?

Answer2:

Staging area is different from working directory because it will contain only 
those files that we would like to add whereas working directory contains 
everything that we have in there. 
It lets us add whatever files we would like to add at any point in time rather 
than everything that we have. 
It will be easier for us to choose what we would like to commit and when!

Reflection Exercise 3:

How can you use the staging area to make sure you have one commit per logical 
change?

Answer3:

When files are added to staging area, we can compare that with the working 
directory and also with most recent commit to find out if this something we 
really like to commit.
This comparison help us determine if this is one logical change or more.

Reflection Exercise 4:

What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?

Answer4:

When we are trying out a new feature but not sure if it would work.
Or when there is something we want to test while keeping the original code
intact.
Different language versions for different ares or countries.

Reflection Exercise 5:

How do the diagrams help you visualize the branch structure?

Answer5: 

Diagrams make it easier to understand that where the head is and how 
branches are progressing. If we would like to make progress to a certain 
branch, diagrams help us make sure that we do not leave out any unreachable
commits.

Reflection Exercise 6:

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Answer6:

The result is that both branches point to a single headafter merger. 
Merge helps merge development work from different branches into one, usually 
the master branch. We can also safely delete branches that have been merged.
In  the pictures, it helps us understand who the parent of the current commit 
is and that we ensure that we do not have any unreachable heads or commits.

Reflection Exercise 7:

What are the pros and cons of Git's automatic merging vs. always doing merges 
manually?

Answer7:

Automatic merges would mean that git must know what changes to keep and commit.
Automatic merges cannot happen in case of a conflict because git leaves it to
the user to determine what to keep or how to resolve the conflict.
If this was not the case, git or any program would need to learn alot about why
and what and how to resolve conflict to complete merges automatically.
This will be a huge overhead so manual merging is definitely better.
